# -*- coding: utf-8 -*-
"""heart.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10yWaTeXjeCNS6HOvp9LbOi2FI6wlslI_

# 1. Business Understanding

With the still growing amount of victims from the covid-19's vaccine, more and more people are suffering from its side effect. Like any vaccine, COVID-19 vaccines can cause mild, short term side effects, such as a low-grade fever or pain or redness at the injection site. Most reactions to vaccines are mild and go away within a few days on their own. More serious or long-lasting side effects to vaccines are also possible. One of the more serious and long-lasting side effect is the myocarditis, a type of heart disease which affects thousands after the vaccination. However it is not the only heart disease possible side effect from the vaccination. Therefore we want to know how can identify and/or predict if someone might or might not have a heart disease

#2. Data Mining

First thing first, We load the dataset and the tools that we are going to use for this project.
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import matplotlib.pyplot as plt
from collections import Counter
import plotly.express as px

df = pd.read_csv("heart.csv")

"""Now we are going to do exploratory data analysis to analyze the dataset to be able to summarize its main characteristicswith visual methods."""

df.head()

df.tail()

print('Instances: {}, Attributes: {}'.format(df.shape[0], df.shape[1]))

df.columns

df.info()

df.isnull().sum()

"""Luckily for us, this dataset does not have any missing values from any of the columns"""

df.describe()

corr = abs(df.corr())
corr_with_sorted = corr[['target']].sort_values(by='target',ascending=False)
corr_matrix = corr.loc[corr_with_sorted.index][corr_with_sorted.index]
mask = np.triu(np.ones_like(corr_matrix,dtype=np.bool))

plt.figure(figsize=(16, 8))
heatmap = sns.heatmap(corr_matrix,annot=True,fmt='.1%',vmin=0,vmax=1,mask=mask)
heatmap.set_title('Features Correlating with being sick', fontdict={'fontsize':18}, pad=16);

"""We can notice multiple features that seem to be factors in the contribution of heart diseases notably 'oldpeak', 'exang', 'cp' and 'thalach'.

**Description of features**
* age - age of patient
* sex - sex of patient (1=male, 0=female)
* cp - chest pain type (4 values)
* trtbps - resting blood pressure
* chol - serum cholestoral in mg/dl
* fbs - fasting blood sugar > 120 mg/dl (1=true, 0=false)
* restecg - resting electrocardiographic results (values 0,1,2)
* thalachh - maximum heart rate achieved
* exang - exercise induced angina (1=yes, 0=no)
* oldpeak - ST depression induced by exercise relative to rest
* slope - the slope of the peak exercise ST segment
* ca - number of major vessels (0-3) colored by flourosopy
* thal - 3 = normal; 6 = fixed defect; 7 = reversable defect
* target - health of patient (0=has heart disease, 1=does not have heart disease)

Now that we understand what the features represent, we will change some values accordingly to be able to understand the following visuals in a straightforward way.
"""

df['sex'] = np.where(df['sex']==1, 'male', 'female')
df['cp'] = np.where(df['cp']==0, 'typical angina', np.where(df['cp']==1, 'atypical angina',
    np.where(df['cp']==2, 'non-anginal pain', np.where(df['cp']==3, 'asymptomatic', 0))))
df['fbs'] = np.where(df['fbs']==1, 'true', 'false')
df['restecg'] = np.where(df['restecg']==0, 'normal', 'abnormal')
df['exang'] = np.where(df['exang']==1, 'yes', 'no')
df['target'] = np.where(df['target']==1, 'not sick', 'sick')

"""Now for the visuals

We will be using alot of pie charts, therefore we will make a pie function to avoid repetition in the code and in consequence avoiding human error
"""

def pie(df_col, x, y):
  count = Counter(df_col)
  count = pd.DataFrame({x:count.keys(), y:count.values()})
  fig = px.pie(count, x, y)
  fig.show()

pie(df['sex'], 'sex', 'number of patients')
pie(df['cp'], 'chest pain type', 'number of patients')
pie(df['fbs'], 'fasting blood sugar over 120 mg/dl', 'number of patients')
pie(df['restecg'], 'resting electrocardiographic results', 'number of patients')
pie(df['exang'], 'exercise induced angina', 'number of patients')
pie(df['ca'], 'number of major blood vessels coloured by colonoscopy', 'number of patients')
pie(df['thal'], 'thal', 'number of patients')
pie(df['target'], 'target', 'number of patients')

"""With these pie charts, we now have a better understanding of what is in the dataset and how the values are distributed within the columns. We notice that there are more male entries than female. In spite of that, the patients number of patients that are and not sick is closely similar. However, one of the pie charts has helped us spot an error in the "ca" column. the "ca" column max value is supposed to be 3, yet 18 entries in the dataset has 4 as the "ca" value. This will need to be corrected while the data cleaning."""

plt.figure(figsize=(10,5))
sns.histplot(x='age', hue='target', data=df, element='step');

"""We can see that heart diseases are more common to people that are above the age of 50."""

sns.countplot(x = 'target', data = df, hue = 'slope') # seems right but dont really understand what slope is

sns.countplot(x = 'target', data = df, hue = 'cp') # seems about right

"""We can see people with heart diseases mostly have "typical angina" type of chest pain."""

sns.countplot(x = 'target', data = df, hue = 'exang') # strange data

"""We can see people with heart diseases are more prone to chest pains after exercising.

# Data Cleaning
"""

df['ca'] = np.where(df['ca']==4, 3, df['ca'])

plt.figure(figsize=(10,5))
sns.countplot(x='ca',hue='target',data=df);

"""We fixed the inconsistency of the 'ca' value going up to 4 by replacing all the 4's by 3's"""

plt.figure(figsize=(8, 6))
sns.boxplot(y='age', x='target', data=df)
plt.show()

"""We can notice some outliers with this graph."""

df['target'] = np.where(df['target']=='sick', 0, 1)

Q1 = df['age'].quantile(0.25)
Q3 = df['age'].quantile(0.75)
IQR = Q3 - Q1

df = df[~((df['age'] < (Q1 - 1.5 * IQR)) | (df['age'] > (Q3 + 1.5 * IQR)))]

"""This is the Interquartile Range approach to finding and removing the outliers."""

plt.figure(figsize=(8, 6))
sns.boxplot(y='age', x='target', data=df)
plt.show()

"""We can notice the graph did not change a lot meaning the outliers were not many to begin with."""

distinct_count = len(df.drop_duplicates())
duplicate_count = len(df) - distinct_count
print(str(distinct_count) + ' distinct rows and ' + str(duplicate_count) + ' duplicated rows')

"""Within the dataset, we have also noticed that there are 723 duplicated rows. Therefore we make a second dataframe to store the original 302 rows for the people who want to use our cleaned up version of dataset but with only the original entries."""

df_ori = df.drop_duplicates()

df_ori.describe()

"""# Feature Engineering"""

df = pd.get_dummies(df)

df.info()

df.describe()

df_ori = pd.get_dummies(df_ori)
df_ori.info()

df_ori.describe()

"""This is the one hot encoding technique for the feature engineering of a dataset. A one hot encoding allows the representation of categorical data to be more expressive. Many machine learning algorithms cannot work with categorical data directly thus data can be provided to machine learning algorithms to improve predictions. One hot encoding is a crucial part of feature engineering for machine learning.

# Saving the dataset
"""

df.to_csv('clean_heart.csv')

df_ori.to_csv('clean_heart_original.csv')

"""# result

1)

pandas read and write datasets

numpy work with tables

matplotlib create graphics

seaborn create graphics

2) after performing the analysis

create Machine Learning program from cleaned data to detect heart disease

3)

informations linked with Covid 19 to see if there is correlation
"""